#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_UnblockNeteaseMusic=n
          CONFIG_PACKAGE_UnblockNeteaseMusicGo=n
          CONFIG_PACKAGE_antfs-mount=n
          CONFIG_PACKAGE_automount=n
          CONFIG_PACKAGE_autosamba=n
          CONFIG_PACKAGE_ddns-scripts=n
          CONFIG_PACKAGE_ddns-scripts_aliyun=n
          CONFIG_PACKAGE_ddns-scripts_dnspod=n
          CONFIG_PACKAGE_etherwake=n
          CONFIG_PACKAGE_iptables-mod-ipsec=n
          CONFIG_PACKAGE_kmod-crypto-cbc=n
          CONFIG_PACKAGE_kmod-crypto-crc32c=n
          CONFIG_PACKAGE_kmod-crypto-deflate=n
          CONFIG_PACKAGE_kmod-crypto-des=n
          CONFIG_PACKAGE_kmod-crypto-echainiv=n
          CONFIG_PACKAGE_kmod-crypto-hmac=n
          CONFIG_PACKAGE_kmod-crypto-md5=n
          CONFIG_PACKAGE_kmod-fs-antfs=n
          CONFIG_PACKAGE_kmod-fs-exfat=n
          CONFIG_PACKAGE_kmod-fs-ext4=n
          CONFIG_PACKAGE_kmod-ipsec=n
          CONFIG_PACKAGE_kmod-ipt-ipsec=n
          CONFIG_PACKAGE_kmod-iptunnel6=n
          CONFIG_PACKAGE_kmod-lib-crc16=n
          CONFIG_PACKAGE_kmod-nf-conntrack-netlink=n
          CONFIG_PACKAGE_kmod-scsi-core=n
          CONFIG_PACKAGE_kmod-tun=n
          CONFIG_PACKAGE_kmod-usb-storage=n
          CONFIG_PACKAGE_kmod-usb-storage-extras=n
          CONFIG_PACKAGE_kmod-usb-storage-uas=n
          CONFIG_PACKAGE_libatomic=n
          CONFIG_PACKAGE_libcares=n
          CONFIG_PACKAGE_libgmp=n
          CONFIG_PACKAGE_libhttp-parser=n
          CONFIG_PACKAGE_libminiupnpc=n
          CONFIG_PACKAGE_libnatpmp=n
          CONFIG_PACKAGE_libnghttp2=n
          CONFIG_PACKAGE_libstdcpp=n
          CONFIG_PACKAGE_libuv=n
          CONFIG_PACKAGE_luci-app-accesscontrol=n
          CONFIG_PACKAGE_luci-app-ddns=n
          CONFIG_PACKAGE_luci-app-ipsec-vpnd=n
          CONFIG_PACKAGE_luci-app-jd-dailybonus=n
          CONFIG_PACKAGE_luci-app-nlbwmon=n
          CONFIG_PACKAGE_luci-app-rclone_INCLUDE_fuse-utils=n
          CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng=n
          CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui=n
          CONFIG_PACKAGE_luci-app-samba=n
          CONFIG_PACKAGE_luci-app-unblockmusic=n
          CONFIG_PACKAGE_luci-app-uugamebooster=n
          CONFIG_PACKAGE_luci-app-vlmcsd=n
          CONFIG_PACKAGE_luci-app-vsftpd=n
          CONFIG_PACKAGE_luci-app-webadmin=n
          CONFIG_PACKAGE_luci-app-wol=n
          CONFIG_PACKAGE_luci-app-xlnetacc=n
          CONFIG_PACKAGE_luci-app-zerotier=n
          CONFIG_PACKAGE_nlbwmon=n
          CONFIG_PACKAGE_node=n
          CONFIG_PACKAGE_openssl-util=n
          CONFIG_PACKAGE_samba36-server=n
          CONFIG_PACKAGE_strongswan=n
          CONFIG_PACKAGE_uugamebooster=n
          CONFIG_PACKAGE_vlmcsd=n
          CONFIG_PACKAGE_vsftpd-alt=n
          CONFIG_PACKAGE_wol=n
          CONFIG_PACKAGE_wsdd2=n
          CONFIG_PACKAGE_zerotier=n
          CONFIG_UnblockNeteaseMusic_Go=n
          CONFIG_UnblockNeteaseMusic_NodeJS=n
          
          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
